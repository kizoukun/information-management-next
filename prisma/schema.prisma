// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "sqlite"
   url      = "file:./dev.db"
}

model User {
   id          String        @id @default(cuid())
   email       String        @unique
   firstName   String
   lastName    String
   password    String
   createdAt   DateTime      @default(now())
   updatedAt   DateTime      @default(now()) @updatedAt
   SavingsUser SavingsUser[]
   SavingsLog  SavingsLog[]

   @@map("users")
}

model Savings {
   id          String        @id @default(cuid())
   title       String
   creatorId   String
   target      Float         @default(0)
   createdAt   DateTime      @default(now())
   updatedAt   DateTime      @default(now()) @updatedAt
   SavingsLog  SavingsLog[]
   SavingsUser SavingsUser[]

   @@index([id, creatorId])
   @@map("savings")
}

model SavingsLog {
   id          String   @id @default(cuid())
   savingsId   String
   savings     Savings  @relation(fields: [savingsId], references: [id], onDelete: Cascade)
   amount      Float
   description String
   userId      String
   user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   type        Boolean
   savingTime  DateTime
   createdAt   DateTime @default(now())
   updatedAt   DateTime @default(now()) @updatedAt

   @@map("savings_logs")
}

model SavingsUser {
   id        String   @id @default(cuid())
   userId    String
   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   savingsId String
   savings   Savings  @relation(fields: [savingsId], references: [id], onDelete: Cascade)
   createdAt DateTime @default(now())
   updatedAt DateTime @default(now()) @updatedAt

   @@map("savings_users")
}
